#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     touch,          sensorTouch)
#pragma config(Sensor, S3,     light,          sensorLightActive)
#pragma config(Sensor, S4,     sonar,          sensorSONAR)
#pragma config(Motor,  mtr_S1_C1_1,     motorD,        tmotorTetrix, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     motorE,        tmotorTetrix, PIDControl, reversed, encoder)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveForward (int move)
{
	move = move*100; // 100 encoder counts = 1 cm  (200 used as place holder)

	nMotorEncoder[motorE] = 0;  //Clear the TETRIX encoders in motors D and E.
  nMotorEncoder[motorD] = 0;	//Robot should be at a complete stop before encoder reset.

	while (nMotorEncoder[motorE] < move-100){ // Motors slowdown 100/4 = 25 degrees from stop position (Can be adjusted for either accuracy or speed)
	motor[motorE] = 50;
	motor[motorD] = 50;
}
	while (nMotorEncoder[motorE] < move){ //Motors move at 10 percent power right before end of movement to improve accuracy.
																				//Motor power can be used this low because of close loop PID control indicated in #pragma statement.
	motor[motorE] = 10;
	motor[motorD] = 10;
}																			//Stop Motors
	motor[motorE] = 0;
	motor[motorD] = 0;
	wait1Msec(200);									//Wait 2/10ths of a second to allow robot to reach a complete stop.
}



task main()
{

}
